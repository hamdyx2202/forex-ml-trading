#!/usr/bin/env python3
"""
إصلاح مسارات قاعدة البيانات في جميع ملفات التدريب
"""

import os
import glob

def fix_database_paths():
    """تحديث جميع المسارات من forex_data.db إلى forex_ml.db"""
    
    # الملفات المطلوب تحديثها
    files_to_update = [
        'train_advanced_complete.py',
        'train_advanced_complete_enhanced.py',
        'train_full_advanced.py',
        'continuous_learner_advanced_v2.py',
        'train_models_simple.py',
        'train_full_simple.py',
        'train_quick_test.py'
    ]
    
    # إضافة أي ملفات python أخرى تحتوي على قاعدة البيانات
    all_python_files = glob.glob("*.py") + glob.glob("src/*.py")
    
    updated_files = []
    
    for file_path in set(files_to_update + all_python_files):
        if not os.path.exists(file_path):
            continue
            
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            
            # استبدال جميع الإشارات لقاعدة البيانات القديمة
            replacements = [
                ('data/forex_data.db', 'data/forex_ml.db'),
                ('"data/forex_data.db"', '"data/forex_ml.db"'),
                ("'data/forex_data.db'", "'data/forex_ml.db'"),
                ('Path("data/forex_data.db")', 'Path("data/forex_ml.db")'),
                ('forex_data.db', 'forex_ml.db'),  # أي إشارة أخرى
            ]
            
            for old, new in replacements:
                content = content.replace(old, new)
            
            # حفظ الملف إذا تم التعديل
            if content != original_content:
                # حفظ نسخة احتياطية
                backup_path = f"{file_path}.backup"
                with open(backup_path, 'w', encoding='utf-8') as f:
                    f.write(original_content)
                
                # حفظ المحتوى المحدث
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                updated_files.append(file_path)
                print(f"✅ تم تحديث: {file_path}")
        
        except Exception as e:
            print(f"❌ خطأ في {file_path}: {e}")
    
    print(f"\n📊 تم تحديث {len(updated_files)} ملف")
    
    # إنشاء سكريبت للتحقق من البيانات
    create_data_check_script()

def create_data_check_script():
    """إنشاء سكريبت للتحقق من البيانات المتاحة"""
    
    script_content = '''#!/usr/bin/env python3
"""
التحقق من البيانات المتاحة في قاعدة البيانات الصحيحة
"""

import sqlite3
import pandas as pd
from pathlib import Path

def check_database():
    db_path = Path("data/forex_ml.db")
    
    if not db_path.exists():
        print(f"❌ قاعدة البيانات غير موجودة: {db_path}")
        return
    
    print(f"✅ قاعدة البيانات موجودة: {db_path}")
    print(f"📊 الحجم: {db_path.stat().st_size / 1024 / 1024:.2f} MB")
    
    try:
        conn = sqlite3.connect(db_path)
        
        # إحصائيات عامة
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM price_data")
        total_records = cursor.fetchone()[0]
        print(f"\\n📈 إجمالي السجلات: {total_records:,}")
        
        # إحصائيات حسب الرمز والإطار الزمني
        query = """
            SELECT symbol, timeframe, COUNT(*) as count
            FROM price_data
            GROUP BY symbol, timeframe
            HAVING count >= 10000
            ORDER BY count DESC
        """
        
        df = pd.read_sql_query(query, conn)
        
        print(f"\\n🎯 الأزواج مع بيانات كافية (10,000+ سجل):")
        print("-" * 60)
        print(f"{'Symbol':<15} {'Timeframe':<10} {'Records':<15}")
        print("-" * 60)
        
        for _, row in df.iterrows():
            print(f"{row['symbol']:<15} {row['timeframe']:<10} {row['count']:<15,}")
        
        # ملخص
        unique_symbols = df['symbol'].nunique()
        unique_timeframes = df['timeframe'].nunique()
        
        print(f"\\n📊 الملخص:")
        print(f"   • عدد الأزواج الفريدة: {unique_symbols}")
        print(f"   • عدد الأطر الزمنية: {unique_timeframes}")
        print(f"   • إجمالي المجموعات: {len(df)}")
        
        conn.close()
        
    except Exception as e:
        print(f"❌ خطأ في قراءة البيانات: {e}")

if __name__ == "__main__":
    check_database()
'''
    
    with open("check_training_data.py", "w", encoding='utf-8') as f:
        f.write(script_content)
    
    print("\n✅ تم إنشاء: check_training_data.py")
    print("🚀 لفحص البيانات: python check_training_data.py")

def main():
    print("🔧 إصلاح مسارات قاعدة البيانات...")
    print("=" * 60)
    
    fix_database_paths()
    
    print("\n✅ تم إصلاح جميع المسارات!")
    print("\n💡 الخطوات التالية:")
    print("1. تشغيل: python check_training_data.py")
    print("2. إعادة تشغيل التدريب: python train_full_advanced.py")

if __name__ == "__main__":
    main()